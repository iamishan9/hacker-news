{"version":3,"sources":["component/Navbar.js","component/Spinner.js","api/api.js","component/ListItem.js","utils/utils.js","component/TopStories.js","routes/routes.js","component/Main.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","Link","to","Component","Spinner","react_spinners","color","BASE_URL","getStoriesIndexArray","storiesType","axios","get","concat","then","res","data","catch","err","getItem","id","STORY_TYPE","TOP_STORIES","ListItem","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","state","sent","setState","by","url","score","title","descendants","idLoaded","stop","position","undefined","href","component_Spinner","getPosition","index","pageNumber","getShowStoryList","array","slice","TopStories","newArray","allStoryIdList","showStoryIdList","currentPageNumber","_this2","length","map","storyId","component_ListItem","key","ROUTES","ROOT","Main","Route","exact","path","component","App","component_Navbar","component_Main","Boolean","window","location","hostname","match","ReactDOM","render","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yQA6BeA,0LAVX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,KAAT,wBAXWC,uDCENC,EANC,kBACNP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAACM,EAAA,gBAAD,CAAkBC,MAAO,+BCR/BC,EAAW,yCAOJC,EAAuB,SAAAC,GAClC,OAAOC,IACJC,IADI,GAAAC,OACGL,GADHK,OACcH,EADd,UAEJI,KAAK,SAAAC,GACJ,OAAOA,EAAIC,OAEZC,MAAM,SAAAC,GACL,OAAOA,KASAC,EAAU,SAAAC,GACrB,OAAOT,IACJC,IADI,GAAAC,OACGL,EADH,SAAAK,OACmBO,EADnB,UAEJN,KAAK,SAAAC,GACJ,OAAOA,EAAIC,OAEZC,MAAM,SAAAC,GACL,OAAOA,KAIAG,EAAa,CACxBC,YAAa,cCiEAC,cA/Eb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAoBRQ,kBArBmBN,OAAAO,EAAA,EAAAP,CAAAQ,EAAAnC,EAAAoC,KAqBC,SAAAC,IAAA,IAAApB,EAAA,OAAAkB,EAAAnC,EAAAsC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACCrB,EAAQM,EAAKgB,MAAMrB,IADpB,OACZJ,EADYsB,EAAAI,KAGlBjB,EAAKkB,SAAS,CACZC,GAAI5B,EAAK4B,GACTxB,GAAIJ,EAAKI,GACTyB,IAAK7B,EAAK6B,IACVC,MAAO9B,EAAK8B,MACZC,MAAO/B,EAAK+B,MACZC,YAAahC,EAAKgC,YAElBC,UAAU,IAXM,wBAAAX,EAAAY,SAAAd,EAAAR,SAlBlBH,EAAKgB,MAAQ,CACXrB,GAAIK,EAAKD,MAAMJ,GACf+B,SAAU1B,EAAKD,MAAM2B,SACrBP,QAAIQ,EACJP,SAAKO,EACLN,WAAOM,EACPL,WAAOK,EACPJ,iBAAaI,EAEbH,UAAU,GAZKxB,wEA2CjB,OAAQG,KAAKa,MAAMQ,SAGjBnD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAAsB2B,KAAKa,MAAMU,SAAhD,MAEFrD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,KAAGqD,KAAMzB,KAAKa,MAAMI,KAAMjB,KAAKa,MAAMM,SAIzCjD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAAoB2B,KAAKa,MAAMK,MAA9C,WAEAhD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAf,KAEEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,KAAT,IAAeyB,KAAKa,MAAMG,KAG5B9C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,KAAKyB,KAAKa,MAAMO,YAAzB,iBAtBRlD,EAAAC,EAAAC,cAACsD,EAAD,aAnDiBlD,aCTVmD,EAAc,SAACC,EAAOC,GACjC,OAAOD,EAAQ,EAAiB,GAAbC,GAWfC,EAAmB,SAACC,EAAOF,GAC/B,OAAOE,EAAMC,MAAmB,GAAbH,EAAoC,IAAlBA,EAAa,KC+CrCI,cA5Cb,SAAAA,IAAc,IAAApC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAiC,IACZpC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmC,GAAA9B,KAAAH,QAaFI,kBAdcN,OAAAO,EAAA,EAAAP,CAAAQ,EAAAnC,EAAAoC,KAcM,SAAAC,IAAA,IAAA0B,EAAA,OAAA5B,EAAAnC,EAAAsC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACK/B,EAAqBY,EAAWC,aADrC,OACZwC,EADYxB,EAAAI,KAGlBjB,EAAKkB,SAAS,CACZoB,eAAgBD,EAChBE,gBAAiBN,EAAiBI,EAAU,KAL5B,wBAAAxB,EAAAY,SAAAd,EAAAR,SAZlBH,EAAKgB,MAAQ,CACXsB,eAAgB,GAChBC,gBAAiB,GACjBC,kBAAmB,GALTxC,wEA6BL,IAAAyC,EAAAtC,KACP,OACE9B,EAAAC,EAAAC,cAAA,WACI4B,KAAKa,MAAMuB,gBAAgBG,OAG3BvC,KAAKa,MAAMuB,gBAAgBI,IAAI,SAACC,EAASb,GACvC,OAAO1D,EAAAC,EAAAC,cAACsE,EAAD,CAAUC,IAAKF,EAASlB,SAAUI,EAAYC,EAAOU,EAAKzB,MAAMwB,mBAAoB7C,GAAIiD,MAHjGvE,EAAAC,EAAAC,cAACsD,EAAD,cAvCelD,aCZVoE,EAJA,CACbC,KAAM,KCoBOC,EARF,WACX,OACE5E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAML,EAAOC,KAAMK,UAAWjB,MCgBlCkB,mLAXX,OACEjF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAACgF,EAAD,MACAlF,EAAAC,EAAAC,cAACiF,EAAD,cAXU7E,aCDE8E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uECXNC,IAASC,OACP1F,EAAAC,EAAAC,cAACyF,EAAA,EAAD,KACE3F,EAAAC,EAAAC,cAAC0F,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjF,KAAK,SAAAkF,GACjCA,EAAaC","file":"static/js/main.7a08e354.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport '../App.css';\n\n/**\n * This class contains Navbar elements.\n *\n * @class Navbar\n * @extends {Component}\n */\nclass Navbar extends Component {\n  /**\n   *\n   *\n   * @returns {object}\n   * @memberof Navbar\n   */\n  render() {\n    return (\n      <div className=\"navbar clearfix\">\n        <div className=\"logo\">\n          <Link to=\"/\">Hacker News</Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Navbar;\n","import React from 'react';\n\nimport { PropagateLoader } from 'react-spinners';\n/**\n *\n * @returns {object}.\n */\nconst Spinner = () => (\n          <div className='spinner-container'>\n            <PropagateLoader  color={'#4285F4'} />\n          </div>\n);\n\nexport default Spinner;\n","import axios from 'axios';\nconst BASE_URL = 'https://hacker-news.firebaseio.com/v0/';\n\n/**\n *\n * @returns {object}\n * @param {*} storiesType\n */\nexport const getStoriesIndexArray = storiesType => {\n  return axios\n    .get(`${BASE_URL}${storiesType}.json`)\n    .then(res => {\n      return res.data;\n    })\n    .catch(err => {\n      return err;\n    });\n};\n\n/**\n *\n * @returns {promise}\n * @param {string} id\n */\nexport const getItem = id => {\n  return axios\n    .get(`${BASE_URL}item/${id}.json`)\n    .then(res => {\n      return res.data;\n    })\n    .catch(err => {\n      return err;\n    });\n};\n\nexport const STORY_TYPE = {\n  TOP_STORIES: 'topstories'\n};\n","import PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport React, { Component } from 'react';\n\nimport Spinner from './Spinner';\nimport { getItem } from '../api/api';\n\nimport '../App.css';\n\n/**\n * This class is for rendering the stories in list.\n *\n * @class ListItem\n * @extends {Component}\n */\nclass ListItem extends Component {\n  /**\n   * Creates an instance of ListItem.\n   *\n   * @param {object} props\n   * @memberof ListItem\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      id: this.props.id,\n      position: this.props.position,\n      by: undefined,\n      url: undefined,\n      score: undefined,\n      title: undefined,\n      descendants: undefined,\n\n      idLoaded: false\n    };\n  }\n\n  /**\n   *\n   *\n   * @memberof ListItem\n   */\n  componentDidMount = async () => {\n    const data = await getItem(this.state.id);\n\n    this.setState({\n      by: data.by,\n      id: data.id,\n      url: data.url,\n      score: data.score,\n      title: data.title,\n      descendants: data.descendants,\n\n      idLoaded: true\n    });\n  };\n\n  /**\n   *\n   *\n   * @returns {object}\n   * @memberof Post\n   */\n  render() {\n    return !this.state.idLoaded ? (\n      <Spinner />\n    ) : (\n      <div className=\"post-item clearfix\">\n        <div className=\"post-left left clearfix\">\n          <div className=\"left post-position\">{this.state.position}.</div>\n        </div>\n        <div className=\"left post-right clearfix\">\n          <div className=\"post-top-section clearfix\">\n            <div className=\"left post-title\">\n              <a href={this.state.url}>{this.state.title}</a>\n            </div>\n          </div>\n\n          <div className=\"post-bottom-section clearfix\">\n            <div className=\"post-points left\">{this.state.score} points</div>\n\n            <div className=\"post-by left\">\n              By\n              <Link to=\"#\"> {this.state.by}</Link>\n            </div>\n\n            <div className=\"post-comment left\">\n              <Link to=\"#\">{this.state.descendants} comments</Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nListItem.propTypes = {\n  id: PropTypes.number\n};\n\nexport default ListItem;\n\n","/**\n *\n * @param {number} index\n * @param {number} pageNumber\n * @returns {number}\n */\nexport const getPosition = (index, pageNumber) => {\n  return index + 1 + pageNumber * 30;\n};\n\n\nexport /**\n *\n *\n * @param {*} array\n * @param {*} pageNumber\n * @returns\n */\nconst getShowStoryList = (array, pageNumber) => {\n  return array.slice(pageNumber * 30, (pageNumber + 1) * 30);\n};\n","import React, { Component } from 'react';\n\nimport Spinner from './Spinner';\nimport ListItem from './ListItem';\n\nimport { getStoriesIndexArray, STORY_TYPE } from '../api/api';\nimport { getPosition, getShowStoryList } from '../utils/utils';\n\nimport '.././App.css';\n\n/**\n *\n *\n * @class TopStories\n * @extends {Component}\n */\nclass TopStories extends Component {\n  /**\n   * Creates an instance of TopStories.\n   *\n   * @memberof TopStories\n   */\n  constructor() {\n    super();\n    this.state = {\n      allStoryIdList: [],\n      showStoryIdList: [],\n      currentPageNumber: 0\n    };\n  }\n\n  /**\n   *\n   *\n   * @memberof TopStories\n   */\n  componentDidMount = async () => {\n    const newArray = await getStoriesIndexArray(STORY_TYPE.TOP_STORIES);\n\n    this.setState({\n      allStoryIdList: newArray,\n      showStoryIdList: getShowStoryList(newArray, 0)\n    });\n  };\n\n  /**\n   *\n   *\n   * @returns {object}\n   * @memberof TopStories\n   */\n  render() {\n    return (\n      <div>\n        {!this.state.showStoryIdList.length ? (\n          <Spinner />\n        ) : (\n          this.state.showStoryIdList.map((storyId, index) => {\n            return <ListItem key={storyId} position={getPosition(index, this.state.currentPageNumber)} id={storyId} />;\n          })\n        )}\n      </div>\n    );\n  }\n}\n\nexport default TopStories;\n","const ROUTES = {\n  ROOT: '/'\n};\n\nexport default ROUTES;\n","import React from 'react';\nimport { Route } from 'react-router-dom';\n\nimport TopStories from './TopStories';\n\nimport ROUTES from '../routes/routes';\nimport '../App.css';\n\n/**\n * This is just a functional component.\n *\n * @returns {object}\n */\nconst Main = () => {\n  return (\n    <div className=\"main \">\n      <Route exact path={ROUTES.ROOT} component={TopStories} />\n    </div>\n  );\n};\n\nexport default Main;\n","import React, { Component } from 'react';\n\nimport Navbar from './component/Navbar';\nimport Main from './component/Main';\n\nimport './App.css';\n\n/**\n *\n *\n * @class App\n * @extends {Component}\n */\nclass App extends Component {\n  /**\n   *\n   *\n   * @returns {object}\n   * @memberof App\n   */\n  render() {\n    return (\n      <div className=\"app-container\">\n        <Navbar />\n        <Main />\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}